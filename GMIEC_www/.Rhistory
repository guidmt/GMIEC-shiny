validate(f,B=1000)
set.seed(63126)
n <- 1000
x <- rnorm(n)
pr <- exp(x)/(1+exp(x))
y <- 1*(runif(n) < pr)
mod <- glm(y~x, family="binomial")
predpr <- predict(mod,type=c("response"))
library(pROC)
roccurve <- roc(y ~ predpr)
?validate.lrm
n <- 1000    # define sample size
age            <- rnorm(n, 50, 10)
blood.pressure <- rnorm(n, 120, 15)
cholesterol    <- rnorm(n, 200, 25)
sex            <- factor(sample(c('female','male'), n,TRUE))
# Specify population model for log odds that Y=1
L <- .4*(sex=='male') + .045*(age-50) +
(log(cholesterol - 10)-5.2)*(-2*(sex=='female') + 2*(sex=='male'))
# Simulate binary y to have Prob(y=1) = 1/[1+exp(-L)]
y <- ifelse(runif(n) < plogis(L), 1, 0)
f <- lrm(y ~ sex*rcs(cholesterol)+pol(age,2)+blood.pressure, x=TRUE, y=TRUE)
#Validate full model fit
validate(f, B=10)              # normall
f <- lrm(y ~ sex*rcs(cholesterol)+pol(age,2)+blood.pressure, x=TRUE, y=TRUE)
#Validate full model fit
validate(f, B=10000)
f <- lrm(y ~ sex*rcs(cholesterol)+pol(age,2)+blood.pressure, x=TRUE, y=TRUE)
#Validate full model fit
validate(f, B=1000)
?validate
rms::
rms::validate
rms::roc
f
0.2709
0.2709*0.5
0.2709*0.5+0.5
library(CMA)
library(boot)
library(pRoc)
library(pROC)
logit_test <- function(d,indices) {
d <- d[indices,]
fit <- glm(your ~ formula, data = d, family = "binomial")
Roc(fit)
return(coef(fit))
}
data(golub)
source("https://bioconductor.org/biocLite.R")
biocLite("golubEsets")
data(golubEsets)
library(golubEsets)
golub
ls()
data(golubMerge)
data(golub)
?golubEsets
data(golubTest)
Golub_Tes
Golub_Test
data("Golub_Test")
Golub_Test
golub<-as.matrix(Golub_Test)
str(Golub_Test)
golub<-exprs(Golub_test)
golub<-exprs(Golub_Test)
boot_fit <- boot(
data = golub,
statistic = logit_test,
R = 1e5
)
golub<-data.frame(exprs(Golub_Test))
boot_fit <- boot(
data = golub,
statistic = logit_test,
R = 1e5
)
logit_test <- function(d,indices) {
d <- d[indices,]
fit <- glm(your ~ formula, data = d, family = "binomial")
Roc(fit)
return(Roc(fit))
}
boot_fit <- boot(
data = golub,
statistic = logit_test,
R = 1e5
)
library(boot)
logit_test <- function(d,indices) {
d <- d[indices,]
fit <- glm(your ~ formula, data = d, family = "binomial")
Roc(fit)
return(Roc(fit))
}
library(golubEsets)
data(golub)
golub<-data.frame(exprs(Golub_Test))
golub<-data.frame(exprs(Golub_Test))
golub
boot_fit <- boot(
data = golub,
statistic = logit_test,
R = 1
)
library(boot)
logit_test <- function(your,d,indices) {
d <- d[indices,]
fit <- glm(your ~ formula, data = d, family = "binomial")
Roc(fit)
return(Roc(fit))
}
library(golubEsets)
golub<-data.frame(exprs(Golub_Test))
boot_fit <- boot(
data = golub,
statistic = logit_test,
R = 1
)
str(golub)
golub[,1]
data(Golub_Train)
golub<-data.frame(exprs(Golub_Train))
golub
str(golub)
library(caret)
data(GermanCredit)
data = GermanCredit %>% rename(credit = Class)
install.packages("caret")
library(caret)
data(GermanCredit)
data = GermanCredit %>% rename(credit = Class)
data(GermanCredit)
GermanCredit
set.seed(999)
mat = matrix(sample(18, 18), 3, 6)
rownames(mat) = paste0("S", 1:3)
colnames(mat) = paste0("E", 1:6)
mat
set.seed(999)
mat = matrix(sample(18, 18), 3, 6)
rownames(mat) = paste0("S", 1:3)
colnames(mat) = paste0("E", 1:6)
df
df
df2<-df = data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
df2<- data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
df2
mat
mat[1:3,1:3]
mat<-mat[1:3,1:3]
chordDiagram(mat)
library(circilize)
library(circlize)
chordDiagram(mat)
set.seed(999)
mat = matrix(sample(18, 18), 6, 6)
rownames(mat) = paste0("S", 1:6)
colnames(mat) = paste0("E", 1:6)
mat
mat
chromDiagram(mat)
chordDiagram(mat)
diag(mat)==0
diag(mat)
diag(mat)<-0
mat
chordDiagram(mat)
mat
mat
mat = matrix(1:9, 3)
mat
mat
mat = matrix(1:9, 3)
rownames(mat) = letters[1:3]
colnames(mat) = LETTERS[1:3]
mat
class(mat)
mat
grid_col
grid.col
class(mat)
mat
mat
mat = matrix(sample(18, 18), 8, 8)
rownames(mat) = paste0("S", 1:8)
colnames(mat) = paste0("E", 1:8)
set.seed(999)
mat = matrix(sample(18, 18), 8, 8)
rownames(mat) = paste0("S", 1:8)
colnames(mat) = paste0("E", 1:8)
mat
diag(mat)==0
mat
grid.col = c(S1 = "red", S2 = "green", S3 = "blue", S4 = "blue",S5 = "blue",S6 = "blue",S7 = "blue",
,S8 = "blue",E1 = "grey", E2 = "grey", E3 = "grey", E4 = "grey", E5 = "grey", E6 = "grey")
grid.col = c(S1 = "red", S2 = "green", S3 = "blue", S4 = "blue",S5 = "blue",S6 = "blue",S7 = "blue",
S8 = "blue",E1 = "grey", E2 = "grey", E3 = "grey", E4 = "grey", E5 = "grey", E6 = "grey")
grid.col
chordDiagram(mat, grid.col = grid.col)
rownames(mat)
colnames(mat)
mat
diag(mat)==0
diag(mat)<-0
grid.col = c(S1 = "red", S2 = "green", S3 = "blue", S4 = "blue",S5 = "blue",S6 = "blue",S7 = "blue",
S8 = "blue",E1 = "grey", E2 = "grey", E3 = "grey", E4 = "grey", E5 = "grey", E6 = "grey")
diag(mat)==0
chordDiagram(mat, grid.col = grid.col)
dim(mat)
rownames(mat)
colnames(mat)
chordDiagram(mat, grid.col = grid.col)
chordDiagram(data.frame(mat), grid.col = grid.col)
chordDiagram(mat, grid.col = grid.col)
mat
grid.col
mat = matrix(1:18, 3, 6)
rownames(mat) = paste0("S", 1:3)
colnames(mat) = paste0("E", 1:6)
rn = rownames(mat)
cn = colnames(mat)
factors = c(rn, cn)
factors
factors = factor(factors, levels = factors)
factors = factor(factors, levels = factors)
col_sum = apply(mat, 2, sum)
row_sum = apply(mat, 1, sum)
xlim = cbind(rep(0, length(factors)), c(row_sum, col_sum))
log(2,2)
log(1.5,2)
2^-0.58
2^1
2^-0.5800544
2^-0.600544
2^-0.40
2^-0.3
2^-0.1
2^-1
library(DESeq1)
library(DESeq2)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
log2foldchange
log2FoldChange
DESeq2::log2foldchange
DESeq2::collapseReplicates()
logratio2foldchange
logratio2foldchange
logratio2foldchange
DESeq2
library(DESeq2)
logratio2foldchange
ls(DESeq2)
library(gtools)
logratio2foldchange()
logratio2foldchange(-2)
logratio2foldchange()
logratio2foldchange(-0.58)
logratio2foldchange(-3.876245)
install.packages("rworldmap")
library(rworldmap)
airports <- read.csv("http://openflights.svn.sourceforge.net/viewvc/openflights/openflights/data/airports.dat", header = FALSE)
colnames(airports) <- c("ID", "name", "city", "country", "IATA_FAA", "ICAO", "lat", "lon", "altitude", "timezone", "DST")
> colnames(airports) <- c("ID", "name", "city", "country", "IATA_FAA", "ICAO", "lat", "lon", "altitude", "timezone", "DST")
library(rworldmap)
newmap <- getMap(resolution = "low")
install.packages("ggmap")
library(ggmap)
library(tidyverse)
map.tokyo <- get_map("Tokyo")
ggmap(map.tokyo)
get_map("Tokyo") %>% ggmap()
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(ggmap)
library(tidyverse)
Now that our packages are downloaded, let’s just get a simple map. Here, we’ll retrieve a basic map of Tokyo from Google Maps.
#=================
# GET MAP OF Tokyo
#=================
map.tokyo <- get_map("Tokyo")
ggmap(map.tokyo)
get_map("Japan") %>% ggmap()
get_map("Japan", zoom = 5) %>% ggmap()
# note: not zoomed enough
get_map("Shinjuku") %>% ggmap()
# this is properly zoomed
get_map("Shinjuku", zoom = 16) %>% ggmap()
df.tokyo_locations <- tibble(location = c("Ueno, Tokyo, Japan"
,"Shibuya, Tokyo, Japan"
,"Shinjuku, Tokyo, Japan"))
# GEOCODE
geo.tokyo_locations <- geocode(df.tokyo_locations$location)
# COMBINE DATA
df.tokyo_locations <- cbind(df.tokyo_locations, geo.tokyo_locations)
# USE WITH GGPLOT
get_map("Tokyo", zoom = 12) %>% ggmap() +
geom_point(data = df.tokyo_locations, aes(x = lon, y = lat), color = 'red', size = 3)
library(ggmap)
library(tidyverse)
Now that our packages are downloaded, let’s just get a simple map. Here, we’ll retrieve a basic map of Tokyo from Google Maps.
#=================
# GET MAP OF Tokyo
#=================
library(ggmap)
library(tidyverse)
install.packages("rlang")
library(ggmap)
library(tidyverse)
map <- openmap(c(70,-179), c(-70,179))
library(OpenStreetMap)
install.packages("OpenStreMap")
install.packages("OpenStreeMap")
install.packages("OpenStreetMap")
library(library(OpenStreetMap)
)
library(OpenStreetMap)
install.packages("tibble")
library(OpenStreetMap)
map <- openmap(c(70,-179), c(-70,179))
plot(map)
data(LA_places)
LA_places
library(rmarkdown)
library(shiny)
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$somevalue })
}
shinyApp(ui, server)
}
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp()
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
output$value
}
shinyApp(ui, server)
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
output$value
print(value == value)
}
shinyApp(ui, server)
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
output$value
print(value == TRUE)
}
shinyApp(ui, server)
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
print(value == TRUE)
}
shinyApp(ui, server)
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
print(value == TRUE)
}
shinyApp(ui, server)
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
}
shinyApp(ui, server)
runApp()
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
""*10
""-10
"x"-10
1.5*10
library(devtools)
install_github('slidify', 'ramnathv')
setwd("C:/Users/guida/Desktop/work/GMIEC_shiny")
options(shiny.fullstacktrace=TRUE)
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
library(shiny)
library(devtools)
install_github('rstudio/rmarkdown')
install.packages('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
install_github('jimhester/knitrBootstrap')
setwd("C:/gUsers/guida/Desktop/work/GMIEC_www")
setwd("C:/Users/guida/Desktop/work/GMIEC_www")
rmarkdown::render_site()
setwd("C:/Users/guida/Desktop/work/GMIEC_shiny")
options(shiny.fullstacktrace=TRUE)
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
rmarkdown::render_site()
setwd("C:\Users\guida\Desktop\work\GMIEC_www")
setwd("C:\Users\guid/Desktop/work/GMIEC_www")
setwd("C:/Users/guid/Desktop/work/GMIEC_www")
setwd("C:/Users/guida/Desktop/work/GMIEC_www")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
