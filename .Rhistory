-2^2.321
10^5.887338035
-10^5.887338035
12-15
table(amplified_genes$tumor,amplified_genes$genes)
4623836-4093208
4093208-3559437
5149359-4623836
?cumsum
10-100
cumsum(10-100)
cumsum(1:10)
1:10
200000-10000
cumsum(1900000)
c(10,20,30,40)-(5,10,20,10)
c(10,20,30,40)-c(5,10,20,10)
cumsum(c(10,20,30,40)-c(5,10,20,10))
getwd()
library(TCGAbiolinks)
library(TCGAbiolinks)
# Select common CN technology available for GBM and LGG
#############################
## CNV data pre-processing ##
#############################
query.gbm.nocnv <- GDCquery(project = "TCGA-GBM",
data.category = "Copy number variation",
legacy = TRUE,
file.type = "nocnv_hg19.seg",
sample.type = c("Primary solid Tumor"))
# to reduce time we will select only 20 samples
query.gbm.nocnv$results[[1]] <- query.gbm.nocnv$results[[1]][1:20,]
GDCdownload(query.gbm.nocnv, files.per.chunk = 100)
gbm.nocnv <- GDCprepare(query.gbm.nocnv, save = TRUE, save.filename = "GBMnocnvhg19.rda")
48000+16000+48000+14000
getwd()
setwd("/Users/guidantonio/df.scores.gsva.RData")
load("/Users/guidantonio/Desktop/df.scores.gsva.RData")
dir()
ls()
str(df.scores)
x = rep(c(1, 2, 3, 4, 2, 4, 3, 2, 1), each = 100)
## Create a noisy version of the signal y = x + rnorm(length(x), sd = 0.5)
y = x + rnorm(length(x), sd = 0.5)
plot(y)
plot(x)
plot(y)
install.packges("tvd")
install.packages("tvd")
library(tvd)
x.denoised = tvd1d(y, lambda = 10, method = "Condat")
plot(y, col = "black", pch = 19, cex = 0.3)
lines(x, col = "blue", lwd = 3)
lines(x.denoised, col = "red", lwd = 3)
alter_fun = list(
background = function(x, y, w, h) {
grid.rect(x, y, w-unit(2, "pt"), h-unit(2, "pt"),
gp = gpar(fill = "#CCCCCC", col = NA))
},
# big blue
del = function(x, y, w, h) {
grid.rect(x, y, w-unit(2, "pt"), h-unit(2, "pt"),
gp = gpar(fill = col["del"], col = NA))
},
# big red
amp = function(x, y, w, h) {
grid.rect(x, y, w-unit(2, "pt"), h-unit(2, "pt"),
igp = gpar(fill = c l["amp"], col = NA))
}
)
alter_fun = list(
background = function(x, y, w, h) {
grid.rect(x, y, w-unit(2, "pt"), h-unit(2, "pt"),
gp = gpar(fill = "#CCCCCC", col = NA))
})
alter_fun = list(
background = function(x, y, w, h) {
grid.rect(x, y, w-unit(2, "pt"), h-unit(2, "pt"),
gp = gpar(fill = "#CCCCCC", col = NA))
},
# big blue
del = function(x, y, w, h) {
grid.rect(x, y, w-unit(2, "pt"), h-unit(2, "pt"),
gp = gpar(fill = col["del"], col = NA))
})
c("a","b","c","d")
sample(c("a","b","c","d"))
sample(c("a","b","c","d"))
sample(c("a","b","c","d"))
sample(c("a","b","c","d"),3)
sample(c("a","b","c","d"),3,T)
sample(c("a","b","c","d"),3,T)
sample(c("a","b","c","d"),3,T)
sample(c("a","b","c","d"),3,F)
sample(c("a","b","c","d"),3,F)
sample(c("a","b","c","d"),3,F)
sample(c("a","b","c","d"),3,F)
sample(c("a","b","c","d"),3,F)
sample(c("a","b","c","d"),3,F)
?sample
library(GenVisR)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenVisR")
tolower
2^0.3
2*(2^0.3)
library(ComplexHeatmap)
?Heatmap
data.frame(matrix(1:4,byrow=2,ncol=2))
df1<-data.frame(matrix(1:4,byrow=2,ncol=2))
colnames(df1)<-c("b","a")
df2<-data.frame(matrix(1:4,byrow=2,ncol=2))
colnames(df2)<-c("a","b")
df2<-data.frame(matrix(1:4,byrow=2,ncol=2))
colnames(df2)<-c("a","b")
df2
df2<-data.frame(matrix(1:4,byrow=2,ncol=2))
colnames(df2)<-c("a","b")
df2
df1
df1[,match(colnames(df1),colnames(df2))]
df1[,match(colnames(df1),colnames(df2))]
df1[,match(colnames(df2),colnames(df1))]
750*5/100
15000*5/100
plotrange <- c(-1,8)
d1 <- density(rchisq(1000, df=2), from=plotrange[1], to=plotrange[2])
d2 <- density(rchisq(1000, df=3)-1, from=plotrange[1], to=plotrange[2])
plot(d1)
lines(d2)
# look for points of intersection
poi <- which(diff(d1$y > d2$y) != 0)
# Mark those points with a circle:
points(x=d1$x[poi], y=d1$y[poi], col="red")
# or with lines:
abline(v=d1$x[poi], col="orange", lty=2)
abline(h=d1$y[poi], col="orange", lty=2)
set.seed(1)
plotrange <- c(-1,8)
d1 <- density(rchisq(1000, df=2), from=plotrange[1], to=plotrange[2])
d2 <- density(rchisq(1000, df=3)-1, from=plotrange[1], to=plotrange[2])
plot(d1)
lines(d2)
poi <- which(diff(d1$y > d2$y) != 0)
points(x=d1$x[poi], y=d1$y[poi], col="red")
poi
library(tidyverse)
library(mixtools)
install.packagtes(mixtools)
install.packages(mixtools)
install.packages("mixtools")
library(tidyverse)
library(mixtools)
observations <- tibble(value = c(
rnorm(n = 125, mean = 0.1, sd = 0.2), #the first normal distribution
rnorm(n = 250, mean = 0.8, sd = 0.2) #this second distribution is double the size of the first
)
)
library(ggplot2)
my_mix <- normalmixEM(observations$value, k = 2) #telling it to find two gaussians in the observations
ggplot(observations, aes(x = value)) +
geom_histogram(binwidth = 0.05) +
mapply(
function(mean, sd, lambda, n, binwidth) {
stat_function(
fun = function(x) {
(dnorm(x, mean = mean, sd = sd)) * n * binwidth * lambda
}
)
},
mean = my_mix[["mu"]], #mean
sd = my_mix[["sigma"]], #standard deviation
lambda = my_mix[["lambda"]], #amplitude
n = length(observations$value), #sample size
binwidth = 0.05 #binwidth used for histogram
)
h<-ggplot(observations, aes(x = value)) +
geom_histogram(binwidth = 0.05) +
mapply(
function(mean, sd, lambda, n, binwidth) {
stat_function(
fun = function(x) {
(dnorm(x, mean = mean, sd = sd)) * n * binwidth * lambda
}
)
},
mean = my_mix[["mu"]], #mean
sd = my_mix[["sigma"]], #standard deviation
lambda = my_mix[["lambda"]], #amplitude
n = length(observations$value), #sample size
binwidth = 0.05 #binwidth used for histogram
)
h
str(h)
predict(my_mix,1:100)
ggplot_build(h)
ggplot_build(h)[[2]]
str(ggplot_build(h))
str(ggplot_build(h)[[1]])
str(ggplot_build(h)[[1]][2])
str(ggplot_build(h)[[1]][[2])
str(ggplot_build(h)[[1]][[2]])
head(ggplot_build(h)[[1]][[2]])
range(head(ggplot_build(h)[[1]][[2]])[,1])
range(head(ggplot_build(h)[[1]][[3]])[,1])
range(head(ggplot_build(h)[[1]][[1]])[,1])
range(head(ggplot_build(h)[[1]][[4]])[,1])
range(head(ggplot_build(h)[[1]])[,1])
str(ggplot_build(h)[[1]]))
str(ggplot_build(h)[[1]])
curve(sdnorm(x, mean=8,sd=2,lambda=0.7), from = 0, to = 30)
x <- seq(0, 50, 1)
plot(x, sdnorm(x, mean = 8, sd = 2, lambda = 0.7), type = 'l', ylab = 'y')
sdnorm = function(x, mean=0, sd=1, lambda=1){lambda*dnorm(x, mean=mean, sd=sd)}
sdnorm = function(x, mean=0, sd=1, lambda=1){lambda*dnorm(x, mean=mean, sd=sd)}
x <- seq(0, 50, 1)
plot(x, sdnorm(x, mean = 8, sd = 2, lambda = 0.7), type = 'l', ylab = 'y')
lines(x, sdnorm(x, mean = 18, sd = 4, lambda = 0.30))
mapply(
function(mean, sd, lambda, n, binwidth) {
stat_function(
fun = function(x) {
(dnorm(x, mean = mean, sd = sd)) * n * binwidth * lambda
}
)
},
mean = my_mix[["mu"]], #mean
sd = my_mix[["sigma"]], #standard deviation
lambda = my_mix[["lambda"]], #amplitude
n = length(observations$value), #sample size
binwidth = 0.05 #binwidth used for histogram
)
observations$value
observations
x=observations$value
tryhere<-  mapply(
function(mean, sd, lambda, n, binwidth) {
stat_function(
fun = function(x) {
(dnorm(x, mean = mean, sd = sd)) * n * binwidth * lambda
}
)
},
mean = my_mix[["mu"]], #mean
sd = my_mix[["sigma"]], #standard deviation
lambda = my_mix[["lambda"]], #amplitude
n = length(observations$value), #sample size
binwidth = 0.05 #binwidth used for histogram
)
tryhere
tryhere[[1]]
tryhere<-  mapply(
function(mean, sd, lambda, n, binwidth) {
fun = function(x) {
(dnorm(x, mean = mean, sd = sd)) * n * binwidth * lambda
}
},
mean = my_mix[["mu"]], #mean
sd = my_mix[["sigma"]], #standard deviation
lambda = my_mix[["lambda"]], #amplitude
n = length(observations$value), #sample size
binwidth = 0.05 #binwidth used for histogram
)
rtyhere
tryhere
tryhere[[1]]
?mapply
n = length(observations$value)
binwidth = 0.05
dnorm(x=observations$value, mean = my_mix[["mu"]][1], sd = my_mix[["mu"]][1])) * n * binwidth * lambda
n = length(observations$value)
binwidth = 0.05
dnorm(x=observations$value, mean = my_mix[["mu"]][1], sd = my_mix[["mu"]][1]) * n * binwidth * lambda
lambda()
lambda
lambda = my_mix[["lambda"]]
dnorm(x=observations$value, mean = my_mix[["mu"]][1], sd = my_mix[["mu"]][1]) * n * binwidth * lambda
my_mix[["mu"]]
my_mix[["mu"]][1]
my_mix[["mu"]][1]
dnorm(x=observations$value, mean = my_mix[["mu"]][1], sd = my_mix[["sd"]][1]) * n * binwidth * lambda
dnorm(x=observations$value, mean = my_mix[["mu"]][1], sd = my_mix[["sigma"]][1])
dnorm(x=observations$value, mean = my_mix[["mu"]][1], sd = my_mix[["sigma"]][1]) * n * binwidth * lambda
n
binwidth
lambda
dnorm(x=observations$value, mean = my_mix[["mu"]][1], sd = my_mix[["sigma"]][1]) * n * binwidth * lambda[1]
range(dnorm(x=observations$value, mean = my_mix[["mu"]][1], sd = my_mix[["sigma"]][1]) * n * binwidth * lambda[1])
binwidth
dnorm(x=observations$value, mean = my_mix[["mu"]][1], sd = my_mix[["sigma"]][1]) * n * binwidth * lambda[1]
plot(dnorm(x=observations$value, mean = my_mix[["mu"]][1], sd = my_mix[["sigma"]][1]) * n * binwidth * lambda[1])
y=dnorm(x=observations$value, mean = my_mix[["mu"]][1], sd = my_mix[["sigma"]][1]) * n * binwidth * lambda[1]
x=observations$value
plot(x,y)
range(y)
max(y)
set.seed(1)
plotrange <- c(-1,8)
d1 <- density(rchisq(1000, df=2), from=plotrange[1], to=plotrange[2])
d2 <- density(rchisq(1000, df=3)-1, from=plotrange[1], to=plotrange[2])
plot(d1)
lines(d2)
# look for points of intersection
poi <- which(diff(d1$y > d2$y) != 0)
# Mark those points with a circle:
points(x=d1$x[poi], y=d1$y[poi], col="red")
# or with lines:
abline(v=d1$x[poi], col="orange", lty=2)
abline(h=d1$y[poi], col="orange", lty=2)
poi <- which(diff(d1$y > d2$y) != 0)
poi
diff(d1$y > d2$y)
diff(d1$y > d2$y)
d1$y
diff(d1$y > d2$y)
d1$y > d2$y
m1=3.74
m2=11.84
std1=1.8
std2=2.92
solve<-function(m1,m2,std1,std2){
a = 1/(2*std1^2) - 1/(2*std2^2)
b = m2/(std2^2) - m1/(std1^2)
c = m1^2 /(2*std1^2) - m2^2 / (2*std2^2) - log(std2/std1)
}
solve(m1,m2,std1,std2 = )
solve(m1,m2,std1,std2 )
solve<-function(m1,m2,std1,std2){
a = 1/(2*std1^2) - 1/(2*std2^2)
b = m2/(std2^2) - m1/(std1^2)
c = m1^2 /(2*std1^2) - m2^2 / (2*std2^2) - log(std2/std1)
return(a,b,c)
}
solve(m1,m2,std1,std2 )
solve(m1,m2,std1,std2)
solve<-function(m1,m2,std1,std2){
a = 1/(2*std1^2) - 1/(2*std2^2)
b = m2/(std2^2) - m1/(std1^2)
c = m1^2 /(2*std1^2) - m2^2 / (2*std2^2) - log(std2/std1)
return(c(a,b,c))
}
solve(m1,m2,std1,std2)
intersect <- function(m1, sd1, m2, sd2, p1, p2){
B <- (m1/sd1^2 - m2/sd2^2)
A <- 0.5*(1/sd2^2 - 1/sd1^2)
C <- 0.5*(m2^2/sd2^2 - m1^2/sd1^2) - log((sd1/sd2)*(p2/p1))
if (A!=0){
(-B + c(1,-1)*sqrt(B^2 - 4*A*C))/(2*A)
} else {-C/B}
}
m1=0; sd1=2; m2=2.5; sd2=2; p1=.8; p2=.2
(is=intersect(m1,sd1,m2,sd2,p1,p2))
xs = seq(-6, 6, by=.01)
plot(xs, p1*dnorm(xs, m1, sd1), type= 'l')
lines(xs, .2*dnorm(xs, m2,sd2))
abline(v=is)
pp = sim_pois(300)
low_expr = c(10, 10)
high_expr = c(20, 50)
pp
low_expr
high_expr
library('devtools')
devtools::install_github('edsgard/trendsceek')
source("http://www.bioconductor.org/biocLite.R")
deps = c('BiocParallel', 'genefilter', 'DESeq2')
new_deps = deps[!(deps %in% installed.packages()[,"Package"])]
if(length(new_deps) != 0){biocLite(new_deps)}
source("http://www.bioconductor.org/biocLite.R")
deps = c('BiocParallel', 'genefilter', 'DESeq2')
new_deps = deps[!(deps %in% installed.packages()[,"Package"])]
if(length(new_deps) != 0){biocLite(new_deps)}
install.packages("clusmca")
install.packages("cluspca")
8*5
(8*5)/4
(8*5)*4
25/160
5/40
5/40*100
790/40
340*4
1000/8000
install.packages("clustvarsel")
library(clustvarsel)
?clustvarsel
require(MASS)
n <- 200
pro <- 0.5
mu1 <- c(0,0)
mu2 <- c(3,3)
sigma1 <- matrix(c(1,0.5,0.5,1),2,2,byrow=TRUE)
sigma2 <- matrix(c(1.5,-0.7,-0.7,1.5),2,2,byrow=TRUE)
X <- matrix(0, n, 5)
colnames(X) <- paste("X", 1:ncol(X), sep ="")
# generate the clustering variables
u <- runif(n)
Class <- ifelse(u < pro, 1, 2)
X[u < pro, 1:2]  <- mvrnorm(sum(u < pro), mu = mu1, Sigma = sigma1)
X[u >= pro, 1:2] <- mvrnorm(sum(u >= pro), mu = mu2, Sigma = sigma2)
# generate the non-clustering variables
X[,3] <- X[,1] + rnorm(n)
X[,4] <- rnorm(n, mean = 1.5, sd = 2)
X[,5] <- rnorm(n, mean = 2, sd = 1)
# plot the data
out <- clustvarsel(X, G = 1:5)
out <- clustvarsel(X, G = 1:5,itermax=50)
install.packages("vscc")
library(vscc)
?vscc
require("mclust")
data(banknote) #Load data
head(banknote[,-1]) #Show preview of full data set
bankrun <- vscc(banknote[,-1])
str(bankrun)
bankrun$topselected
head(banknote)
head(bankrun$topselected)
cor(c(1,2,3),c(3,2,1))
cor(c(1,2,3),c(1,2,3))
cor(c(1,2,3),c(3,1,2))
cor(c(1,2,3),c(3,1,2),method="spearman")
library(M3C)
c(0,1,0,1,0,1,0,1,0,1,0,1)
c(0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,)
status<-c(0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,)
status<-c(0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1)
status
sample(status,replacement=T)
sample(status,replace=T)
sample(status,replace=T)
sample(status,replace=T)
sample(status,replace=T)
sample(status,replace=T)
sample(status,replace=T)
table(status)
number_samples_negative_class<-table(dataset3_boot$outcome)[1]
number_samples_negative_class
number_samples_negative_class
number_samples_negative_class<-status(number_samples_negative_class)
number_samples_negative_class<-table(status)[1]
number_samples_negative_class
status
which(number_samples_negative_class==1)
which(number_samples_negative_class%in%1)
which(status %in% 1)
sample(which(status %in% 1),number_samples_negative_class)
library(heatmaply)
?hheatmaply
?heatmaply
# x <- heatmapr(mtcars)
library(heatmaply)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
# x <- heatmapr(mtcars)
library(heatmaply)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
plotly::heatmaply(iris[,-5], k_row = 3, k_col = 2)
library(heatmaply)
?hheatmaply
?heatmaply
library(heatmaply)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
library(heatmaply)
heatmaply(iris[,-5])
pdf("test.pdf")
library(heatmaply)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
x11()
library(heatmaply)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
sessionInfo()
heatmaply(iris[,-5], k_row = 3, k_col = 2)
library(heatmaply)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
x11()
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
install.packages(c("Rcpp","ggplot2","munsell","htmltools","DBI","assertthat",
"gridExtra","digest","fpc","TSP","registry","gclus","gplots","RColorBrewer",
"stringr","labeling","yaml"))
install.packages(c("Rcpp", "ggplot2", "munsell", "htmltools", "DBI", "assertthat", "gridExtra", "digest", "fpc", "TSP", "registry", "gclus", "gplots", "RColorBrewer", "stringr", "labeling", "yaml"))
library(heatmaply)
? heatmaply
library(heatmaply)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
devtools::install_github("ropensci/plotly") # you will probably benefit from the latest version of plotly
library(plotly)
library(heatmaply)
library(heatmaply)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
library(heatmaply)
heatmaply(iris[,-5], k_row = 3, k_col = 2)
install.packages(c("Rcpp","ggplot2","munsell","htmltools","DBI","assertthat",
"gridExtra","digest","fpc","TSP","registry","gclus","gplots","RColorBrewer",
"stringr","labeling","yaml"))
install.packages(c("Rcpp", "ggplot2", "munsell", "htmltools", "DBI", "assertthat", "gridExtra", "digest", "fpc", "TSP", "registry", "gclus", "gplots", "RColorBrewer", "stringr", "labeling", "yaml"))
library(heatmaply)
heatmaply(mtcars, k_row = 3, k_col = 2)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
