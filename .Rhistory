setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
a<-("ciao")
is.characater(a)
is.character(a)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
print(dim(input_MUTATION_selected))
#compute z-scores for gene expression data
check_ge_for_patients[,-1]<-log(check_ge_for_patients[,-1]+1,2)
check_ge_for_patients[,-1]<-apply(X=check_ge_for_patients[,-1],1,FUN=function(X){(X-mean(X))/sd(X)})
#check columns of the genes
colnames(check_ge_for_patients)[1]<-"genesID"
colnames(input_CNV_selected)[1]<-"genesID"
colnames(input_METH_selected)[1]<-"genesID"
colnames(input_MUTATION_selected)[1]<-"genesID"
colnames(tabDrugs)[1:2]<-c("genes","drug_primary_name")
pts_exp_ge<-colnames(check_ge_for_patients[-1]) #the first column is the gene-name
pts_exp_cnv<-colnames(input_CNV_selected[-1])
pts_meth_cnv<-colnames(input_METH_selected[-1])
pts_mut<-colnames(input_MUTATION_selected[,2])#tumor sample barcode it is the mandatory colnames
list_pts_experiments<-list(ge=pts_exp_ge,cnv=pts_exp_cnv,meth=pts_meth_cnv,mut=pts_mut)
ALL_samples_UNIQUE<-unique(as.character(unlist(list_pts_experiments)))
RES_ENGINE<-list()
clusters=2
for(asu in 1:length(ALL_samples_UNIQUE)){
se_patient_selection<-ALL_samples_UNIQUE[asu]
print("Step3: Extract the data from the patient")
print(se_patient_selection)
GE_current_patient<-check_ge_for_patients[,c("genesID",se_patient_selection)]
CNV_current_patient<-input_CNV_selected[,c("genesID",se_patient_selection)]
METH_current_patient<-input_METH_selected[,c("genesID",se_patient_selection)]
#it is possible that 1 patient does not have a gene
if(isTRUE(input_MUTATION_selected[,2]==se_patient_selection)){
MUT_current_patient<-input_MUTATION_selected[which(input_MUTATION_selected[,2]==se_patient_selection),]
} else {
print("i do not have a patient with mutations")
dfparse<-matrix(nrow=1,ncol=ncol(input_MUTATION_selected))
dfparse[1]<-"NA" #false gene
dfparse[2:ncol(input_MUTATION_selected)]<-as.numeric(0)
colnames(dfparse)<-colnames(input_MUTATION_selected)
MUT_current_patient<-dfparse
}
list_DF<-c("GE_current_patient","CNV_current_patient","METH_current_patient","MUT_current_patient")
#check the presence of empty data.frame
res_nrow<-NULL
for(dfe in list_DF){
current_df<-get(dfe)
res_nrow<-c(res_nrow,dim(current_df)[1])
}
#check2: control which samples does not have genes
nogenesindataset<-which(res_nrow==0)
if(length(nogenesindataset)==0){
list_DF_clean<-list_DF
DF_notpresent<-"AlldataAvailable"
} else{
list_DF_clean<-list_DF[-nogenesindataset]
DF_notpresent<-list_DF[nogenesindataset]
}
list_df_patients<-list()
for(ldfc in 1:length(list_DF_clean)){
list_df_patients[[ldfc]]<-get(list_DF_clean[ldfc])
}
###
### merge the different experiments for the same patient
###
merge_experiment_patient_df<-Reduce(function(...) merge(...,by="genesID",all=T),list_df_patients)
##
## Start to parse the object merge_experiment_patient_df
##
#find the index of columns with the string of patients: Select Data of Copy Number. -> Mutation does not have a column with the name of sample
index_mepd<-grep(colnames(merge_experiment_patient_df),pattern=se_patient_selection)
#create a new data.frame with hugo symbol and entrez and the values of experiments
dfPatientForAnalysis<-cbind(merge_experiment_patient_df[,1],merge_experiment_patient_df[index_mepd],DF_notpresent=rep(0,nrow(merge_experiment_patient_df)))
colnames(dfPatientForAnalysis)<-c("genesID",list_DF_clean)
#Change the last column, the experiment without data is always in the last column, see previously line of code
colnames(dfPatientForAnalysis)[ncol(dfPatientForAnalysis)]<-DF_notpresent
###
### just for test! dfPatientForAnalysis can be used for other analysis not Aprior.
###
print("Step4: ")
#remove NA values
dfPatientForAnalysis[is.na(dfPatientForAnalysis)]<-0
rownames(dfPatientForAnalysis)<-paste(dfPatientForAnalysis[,1],seq(1:nrow(dfPatientForAnalysis)))
##
##apply the rules
##
#create a data.frame with the update data
###
### Step1: Identify if the gene expression, cnv, methylation of TFs predicted expression of genes of interest
###
parameter_discr_unlist<-as.numeric(unlist(strsplit(parameter_discr,split=";")))
ge_d<-parameter_discr_unlist[1]
cnv_d<-parameter_discr_unlist[2]
meth_d<-parameter_discr_unlist[3]
results_for_tf2<-rules_notfor_tf(dfPatientForAnalysis=dfPatientForAnalysis,se_patient_selection=se_patient_selection,ge_d=ge_d,cnv_d=cnv_d,meth_d=meth_d,MUT_current_patient=MUT_current_patient)
dfPatientForAnalysis_GAC<-results_for_tf2[[1]] #this a data.frame with the values of omics experiments and binary rules
col_relTF<-results_for_tf2[[2]]
dfPatientForAnalysis_GAC_rel_TF<-dfPatientForAnalysis_GAC[,col_relTF]
rownames(dfPatientForAnalysis_GAC_rel_TF)<-dfPatientForAnalysis_GAC_rel_TF[,1]
#do a control, if the properties of the genes are always equal to 0 it you can remove these columns
#this step it is important to reduce the computational cost.
resSumControl<-apply(dfPatientForAnalysis_GAC_rel_TF[,2:ncol(dfPatientForAnalysis_GAC_rel_TF)],2,sum)
names.good.properties<-names(resSumControl[which(resSumControl!=0)])
input_for_klar<-cbind(genesID=dfPatientForAnalysis_GAC_rel_TF[,1],dfPatientForAnalysis_GAC_rel_TF[,names.good.properties])
input_for_klar2 <- data.frame(sapply(input_for_klar,as.factor))
###
### run the engine for the analysis
###
print("Step6: Analysis")
mergeGAC_COM_res_K_2<-engine_all_dataset(input_for_klar2,dfPatientForAnalysis_GAC=dfPatientForAnalysis_GAC,clusters)
print(colnames(mergeGAC_COM_res_K_2))
#search in which rows are present the genes in the table of drugs-genes interactions
#two columns in the tables of database must be present: genes and drug_primary_name
indexSubDrug<-which(tabDrugs$genes%in%mergeGAC_COM_res_K_2[,1])
subtabDrugs<-tabDrugs[indexSubDrug,]
#i use the symbol "#" to concatenate the strings, because when i will count the number of drugs for gene if are present "," inside the name of
#drugs i will obtain a mistake number of genes (es. 1-2ethyl,diol,benze)
collapseDrugTable<-aggregate(drug_primary_name ~ genes, data = subtabDrugs, paste,collapse = "#")
mergeGAC_COM_res_K_2_drugs<-merge(mergeGAC_COM_res_K_2,collapseDrugTable,by.x="genesID",by.y="genes",all.x=T)
countDrugsFunc<-function(x){
#drugs name are repeated for the same genes, i used unique to manage this issue: the reason is that different database have the same drugs.
ld<-as.numeric(length(unique(unlist(strsplit(x,split="#")))))
return(ld)
}
resCountDrugs<-as.numeric(sapply(mergeGAC_COM_res_K_2_drugs$drug_primary_name,countDrugsFunc))
resCountDrugs[which(is.na(mergeGAC_COM_res_K_2_drugs$drug_primary_name))]<-0
#test the druggability of a modules
mergeGAC_COM_res_K_2_drugs<-cbind(mergeGAC_COM_res_K_2_drugs,Count_Drugs_For_Gene=resCountDrugs)
print(colnames(mergeGAC_COM_res_K_2_drugs))
### estimate the druggability of the modules
# incProgress(0.15, detail = "Step4: Compute the scores")
TOTAL_score_module<-NULL
TOTAL_score_module_drugs<-NULL
mergeGAC_COM_res_K_2_drugs$clusters<-as.numeric(mergeGAC_COM_res_K_2_drugs$clusters)
print(colnames(mergeGAC_COM_res_K_2_drugs))
mergeGAC_COM_res_K_2_drugs<-mergeGAC_COM_res_K_2_drugs[order(mergeGAC_COM_res_K_2_drugs$clusters),]
print(colnames(mergeGAC_COM_res_K_2_drugs))
uniqGA<-as.numeric(unique(mergeGAC_COM_res_K_2_drugs$clusters))
for(mga in uniqGA){
print(mga)
smgcrkl<- mergeGAC_COM_res_K_2_drugs[mergeGAC_COM_res_K_2_drugs$clusters==mga,]
# $ genesID                  : Factor w/ 22569 levels "1-Dec","1-Mar",..: 22 72 108 152 242 284 293 294 315 368 ...
# $ FC_GE_TF                 : num  1 1 1 1 1 1 1 1 1 1 ...
# $ Genes_overexpressed      : num  0 0 0 0 0 0 0 0 0 0 ...
# $ Genes_underexpressed     : num  0 0 0 0 0 0 0 0 0 0 ...
#check the number of modules alterated: the first column is hugo symbol, the second is the fold-change between the expression (is not an alteration)
#of tf and target genes. I remove these columns because are not useful in the categorization of alterated and not alterated genes
# col_relTF
# [1] "genesID"                   "FC_GE_TF"                  "Genes_overexpressed"
# [4] "Genes_underexpressed"      "CNV_EC_gain"               "CNV_EC_depletion"
# [7] "CNV_gain"                  "CNV_depletion"             "CNV_TF_categorization_TF"
# [10] "METH_EC_hyper"             "METH_EC_hypo"              "METH_hyper"
# [13] "METH_hypo"                 "METH_TF_categorization_TF" "MUT_genes"
# [16] "MUT_TF"
alterated_genes_in_module<-apply(smgcrkl[,col_relTF][,-c(1:2)],1,FUN=function(x){ifelse(sum(x)==0,"Not_altered","Alterated")})
#count the number of not alterated genes in modules
check_alteration<-cbind(smgcrkl,alterated_genes_in_module)
nrow_module<-nrow(smgcrkl[,col_relTF][,-c(1:2)])
ncol_module<-ncol(smgcrkl[,col_relTF][,-c(1:2)])
#total size module
total_cell<-nrow_module*ncol_module
number_not_alteration_modules<-length(which(smgcrkl[,col_relTF][,-c(1:2)]==0))
number_alteration_modules<-length(which(smgcrkl[,col_relTF][,-c(1:2)]==1))
#estimate LNAM
ratio_na_inmodule_with_totsize<-number_not_alteration_modules/total_cell
#estimate LAM
ratio_alt_inmodule_with_totsize<-number_alteration_modules/total_cell
#estimate DELTA-A
#estimate the difference between the number of cell without alteration and with alteration in modules
#positive values indicate that the modules is again integrate otherwise not. [range-1,1]
#deltamodulesinalt<-ratio_na_inmodule_with_totsize-ratio_alt_inmodule_with_totsize
deltamodulesinalt<-ratio_alt_inmodule_with_totsize
scorestatusmodule<-as.numeric(rep(deltamodulesinalt,nrow_module))
TOTAL_score_module<-c(TOTAL_score_module,scorestatusmodule)
#estimate rdg
genes_with_drugs<-length(which(smgcrkl[,"Count_Drugs_For_Gene"]>=1))/nrow_module
#estimate NRDG
genes_without_drugs<-length(which(smgcrkl[,"Count_Drugs_For_Gene"]==0))/nrow_module
#estimate DELTA-D
#deltamodulegenesdrugs<-genes_with_drugs-genes_without_drugs
deltamodulegenesdrugs<-genes_with_drugs
deltamodulegenesdrugs <-rep(deltamodulegenesdrugs,nrow_module)
TOTAL_score_module_drugs<-c(TOTAL_score_module_drugs,deltamodulegenesdrugs)
}
#estimate SAD
mergeGAC_COM_res_K_2_drugs <-cbind(cbind(cbind(mergeGAC_COM_res_K_2_drugs,scorescorestatusmodule=TOTAL_score_module),TOTAL_score_module_drugs),combinedscore=TOTAL_score_module_drugs*TOTAL_score_module)
# > colnames(mergeGAC_COM_res_K_2_drugs)
# [1] "genesID"                   "FC_GE_TF"                  "Genes_overexpressed"
# [4] "Genes_underexpressed"      "CNV_depletion"
# scorescorestatusmodule
# TOTAL_score_module_drugs
# combinedscore
RES_ENGINE[[asu]]<-mergeGAC_COM_res_K_2_drugs
}
str(RES_ENGINE)
names(RES_ENGINE)<-as.character(ALL_samples_UNIQUE)
GPM_TOT<-NULL
#find the modules in total
for(bpm in 1:length(res_analysis_each_patient)){
gpm<-unique(res_analysis_each_patient[[bpm]][,"clusters"])
GPM_TOT<-c(GPM_TOT,gpm)
}
GPM_TOT<-NULL
#find the modules in total
for(bpm in 1:length(res_analysis_each_patient)){
gpm<-unique(res_analysis_each_patient[[bpm]][,"clusters"])
GPM_TOT<-c(GPM_TOT,gpm)
}
res_analysis_each_patient=RES_ENGINE
for(bpm in 1:length(res_analysis_each_patient)){
gpm<-unique(res_analysis_each_patient[[bpm]][,"clusters"])
GPM_TOT<-c(GPM_TOT,gpm)
}
patient_id<-"patient_id"
total_genes_patients<-"total_genes_patients"
number_modules<-"number_modules"
total_modules<-unique(GPM_TOT)
number_genes_for_module_size<-paste("number_genes_in_module",total_modules,sep="_")
genes_in_each_module<-paste("genes_in_",paste("module",total_modules,sep="_"),sep="")
number_drugs_for_module_size<-paste("number_drugs_in_module",total_modules,sep="_")
drugs_in_each_module<-paste("drugs_in_",paste("module",total_modules,sep="_"),sep="")
scores_module_unique<-paste("score_alteration_module",total_modules,sep="")
scores_module_drugs_unique<-paste("score_drugs_rdg",total_modules,sep="_")
scores_module_sad_unique<-paste("score_sad",total_modules,sep="_")
ALL_colnames<-c(patient_id,total_genes_patients,number_modules
,number_genes_for_module_size,genes_in_each_module,
number_drugs_for_module_size,
drugs_in_each_module,
scores_module_unique,
scores_module_drugs_unique,
scores_module_sad_unique
)
MATRIX_RESULTS_ALL<-data.frame(matrix(,ncol=length(ALL_colnames)))
colnames(MATRIX_RESULTS_ALL)<-ALL_colnames
print("check bpm")
for(bpm in 1:length(res_analysis_each_patient)){
print(bpm)
data_current_patient<-res_analysis_each_patient[[bpm]]
patient_id<- names(res_analysis_each_patient)[[bpm]]
names(patient_id)<-"sample_id"
genes_patients<-data_current_patient[,1]
total_genes_patients<-length(data_current_patient[,2])
names(total_genes_patients)<-"total_genes_patients"
number_modules<-length(unique(data_current_patient[,"clusters"]))
names(number_modules)<-"number_modules"
#extract the number of genes for modules and the genes inside each modules
number_genes_for_module<-aggregate(genesID ~ clusters, data =  data_current_patient[,c("clusters","genesID")], length)
number_genes_for_module_size<-number_genes_for_module[,2]
names(number_genes_for_module_size)<-paste("number_genes_in_module",number_genes_for_module[,1],sep="_")
genes_in_each_module<-aggregate(genesID ~ clusters, data =  data_current_patient[,c("clusters","genesID")], paste,collapse=",")
genes_in_each_module<-genes_in_each_module[,2]
names(genes_in_each_module)<-paste("genes_in_",paste("module",number_genes_for_module[,1],sep="_"),sep="")
#extract the number of drugs for modules and the genes inside each modules
number_drugs_for_module<-aggregate(drug_primary_name ~ clusters, data =  data_current_patient[,c("clusters","drug_primary_name")], paste,collapse=",")
number_drugs_for_module[,2]<-apply(number_drugs_for_module,1,FUN=function(x){length(unlist(strsplit(x[2],split="#")))})
number_drugs_for_module_size<-number_drugs_for_module[,2]
names(number_drugs_for_module_size)<-paste("number_drugs_in_module",number_drugs_for_module[,1],sep="_")
drugs_in_each_module<-aggregate(drug_primary_name ~ clusters, data =  data_current_patient[,c("clusters","drug_primary_name")], paste,collapse="@") #use this character to merge drugs because it is important in the next step.
drugs_in_each_module<-drugs_in_each_module[,2]
names(drugs_in_each_module)<-paste("drugs_in_",paste("module",number_drugs_for_module[,1],sep="_"),sep="")
#extract the alteration scores for each module
scores_module<-aggregate(scorescorestatusmodule ~ clusters, data =  data_current_patient[,c("clusters","scorescorestatusmodule")], unique)
scores_module_unique<-scores_module[,2]
names(scores_module_unique)<-paste("score_alteration_module",scores_module[,1],sep="")
#extract the drugs scores for each module
scores_module_drugs<-aggregate(TOTAL_score_module_drugs ~ clusters, data =  data_current_patient[,c("clusters","TOTAL_score_module_drugs")], unique)
scores_module_drugs_unique<-scores_module_drugs[,2]
names(scores_module_drugs_unique)<-paste("score_drugs_rdg",scores_module_drugs[,1],sep="_")
#extract the sad scores for each module
scores_module_sad<-aggregate(combinedscore ~ clusters, data =  data_current_patient[,c("clusters","combinedscore")], unique)
scores_module_sad_unique<-scores_module_sad[,2]
names(scores_module_sad_unique)<-paste("score_sad",scores_module_sad[,1],sep="_")
#extract rule for each module
rule_in_each_module<-aggregate(clusters ~ rule, data =  data_current_patient[,c("clusters","rule")], unique)
rule_save<-as.character(rule_in_each_module[,1])
names(rule_save)<-paste(paste("rule_module",rule_in_each_module[,2],sep=""))
row_for_each_patient<-c(patient_id,
total_genes_patients,
number_modules,
number_genes_for_module_size,
genes_in_each_module,
number_drugs_for_module_size,
drugs_in_each_module,
scores_module_unique,
scores_module_drugs_unique,
scores_module_sad_unique,
rule_save
)
row_for_each_patient_t<-t(data.frame(row_for_each_patient))
colnames(row_for_each_patient_t)<-names(row_for_each_patient)
dfrow<-data.frame(row_for_each_patient_t,stringsAsFactors=F)
colnames(dfrow)<-as.character(names(row_for_each_patient))
# MATRIX_RESULTS_ALL[[bpm]]
MATRIX_RESULTS_ALL<-rbind.fill(MATRIX_RESULTS_ALL,dfrow)
}
str(MATRIX_RESULTS_ALL)
MATRIX_RESULTS_ALL$sample_id
patient_id
total_genes_patients
dfrow
str(MATRIX_RESULTS_ALL)
dfrow
MATRIX_RESULTS_ALL<-data.frame(matrix(,ncol=length(ALL_colnames)))
colnames(MATRIX_RESULTS_ALL)<-ALL_colnames
print("check bpm")
for(bpm in 1:length(res_analysis_each_patient)){
print(bpm)
data_current_patient<-res_analysis_each_patient[[bpm]]
patient_id<- names(res_analysis_each_patient)[[bpm]]
names(patient_id)<-"sample_id"
genes_patients<-data_current_patient[,1]
total_genes_patients<-length(data_current_patient[,2])
names(total_genes_patients)<-"total_genes_patients"
number_modules<-length(unique(data_current_patient[,"clusters"]))
names(number_modules)<-"number_modules"
#extract the number of genes for modules and the genes inside each modules
number_genes_for_module<-aggregate(genesID ~ clusters, data =  data_current_patient[,c("clusters","genesID")], length)
number_genes_for_module_size<-number_genes_for_module[,2]
names(number_genes_for_module_size)<-paste("number_genes_in_module",number_genes_for_module[,1],sep="_")
genes_in_each_module<-aggregate(genesID ~ clusters, data =  data_current_patient[,c("clusters","genesID")], paste,collapse=",")
genes_in_each_module<-genes_in_each_module[,2]
names(genes_in_each_module)<-paste("genes_in_",paste("module",number_genes_for_module[,1],sep="_"),sep="")
#extract the number of drugs for modules and the genes inside each modules
number_drugs_for_module<-aggregate(drug_primary_name ~ clusters, data =  data_current_patient[,c("clusters","drug_primary_name")], paste,collapse=",")
number_drugs_for_module[,2]<-apply(number_drugs_for_module,1,FUN=function(x){length(unlist(strsplit(x[2],split="#")))})
number_drugs_for_module_size<-number_drugs_for_module[,2]
names(number_drugs_for_module_size)<-paste("number_drugs_in_module",number_drugs_for_module[,1],sep="_")
drugs_in_each_module<-aggregate(drug_primary_name ~ clusters, data =  data_current_patient[,c("clusters","drug_primary_name")], paste,collapse="@") #use this character to merge drugs because it is important in the next step.
drugs_in_each_module<-drugs_in_each_module[,2]
names(drugs_in_each_module)<-paste("drugs_in_",paste("module",number_drugs_for_module[,1],sep="_"),sep="")
#extract the alteration scores for each module
scores_module<-aggregate(scorescorestatusmodule ~ clusters, data =  data_current_patient[,c("clusters","scorescorestatusmodule")], unique)
scores_module_unique<-scores_module[,2]
names(scores_module_unique)<-paste("score_alteration_module",scores_module[,1],sep="")
#extract the drugs scores for each module
scores_module_drugs<-aggregate(TOTAL_score_module_drugs ~ clusters, data =  data_current_patient[,c("clusters","TOTAL_score_module_drugs")], unique)
scores_module_drugs_unique<-scores_module_drugs[,2]
names(scores_module_drugs_unique)<-paste("score_drugs_rdg",scores_module_drugs[,1],sep="_")
#extract the sad scores for each module
scores_module_sad<-aggregate(combinedscore ~ clusters, data =  data_current_patient[,c("clusters","combinedscore")], unique)
scores_module_sad_unique<-scores_module_sad[,2]
names(scores_module_sad_unique)<-paste("score_sad",scores_module_sad[,1],sep="_")
#extract rule for each module
rule_in_each_module<-aggregate(clusters ~ rule, data =  data_current_patient[,c("clusters","rule")], unique)
rule_save<-as.character(rule_in_each_module[,1])
names(rule_save)<-paste(paste("rule_module",rule_in_each_module[,2],sep=""))
row_for_each_patient<-c(patient_id,
total_genes_patients,
number_modules,
number_genes_for_module_size,
genes_in_each_module,
number_drugs_for_module_size,
drugs_in_each_module,
scores_module_unique,
scores_module_drugs_unique,
scores_module_sad_unique,
rule_save
)
row_for_each_patient_t<-t(data.frame(row_for_each_patient))
colnames(row_for_each_patient_t)<-names(row_for_each_patient)
dfrow<-data.frame(row_for_each_patient_t,stringsAsFactors=F)
colnames(dfrow)<-as.character(names(row_for_each_patient))
MATRIX_RESULTS_ALL<-rbind(MATRIX_RESULTS_ALL,dfrow)
}
dim(MATRIX_RESULTS_ALL)
ALL_colnames<-c(patient_id,total_genes_patients,number_modules
,number_genes_for_module_size,genes_in_each_module,
number_drugs_for_module_size,
drugs_in_each_module,
scores_module_unique,
scores_module_drugs_unique,
scores_module_sad_unique
)
ALL_colnames
ALL_colnames<-c(patient_id,total_genes_patients,number_modules
,number_genes_for_module_size,genes_in_each_module,
number_drugs_for_module_size,
drugs_in_each_module,
scores_module_unique,
scores_module_drugs_unique,
scores_module_sad_unique
)
ALL_colnames
class(ALL_colnames)
patient_id
total_genes_patients
number_modules
scores_module_sad_unique
ALL_colnames
ALL_colnames<-c(patient_id,total_genes_patients,number_modules
,number_genes_for_module_size,genes_in_each_module,
number_drugs_for_module_size,
drugs_in_each_module,
scores_module_unique,
scores_module_drugs_unique,
scores_module_sad_unique
)
MATRIX_RESULTS_ALL<-data.frame(matrix(,ncol=length(ALL_colnames)))
colnames(MATRIX_RESULTS_ALL)<-names(ALL_colnames)
print("check bpm")
for(bpm in 1:length(res_analysis_each_patient)){
print(bpm)
data_current_patient<-res_analysis_each_patient[[bpm]]
patient_id<- names(res_analysis_each_patient)[[bpm]]
names(patient_id)<-"sample_id"
genes_patients<-data_current_patient[,1]
total_genes_patients<-length(data_current_patient[,2])
names(total_genes_patients)<-"total_genes_patients"
number_modules<-length(unique(data_current_patient[,"clusters"]))
names(number_modules)<-"number_modules"
#extract the number of genes for modules and the genes inside each modules
number_genes_for_module<-aggregate(genesID ~ clusters, data =  data_current_patient[,c("clusters","genesID")], length)
number_genes_for_module_size<-number_genes_for_module[,2]
names(number_genes_for_module_size)<-paste("number_genes_in_module",number_genes_for_module[,1],sep="_")
genes_in_each_module<-aggregate(genesID ~ clusters, data =  data_current_patient[,c("clusters","genesID")], paste,collapse=",")
genes_in_each_module<-genes_in_each_module[,2]
names(genes_in_each_module)<-paste("genes_in_",paste("module",number_genes_for_module[,1],sep="_"),sep="")
#extract the number of drugs for modules and the genes inside each modules
number_drugs_for_module<-aggregate(drug_primary_name ~ clusters, data =  data_current_patient[,c("clusters","drug_primary_name")], paste,collapse=",")
number_drugs_for_module[,2]<-apply(number_drugs_for_module,1,FUN=function(x){length(unlist(strsplit(x[2],split="#")))})
number_drugs_for_module_size<-number_drugs_for_module[,2]
names(number_drugs_for_module_size)<-paste("number_drugs_in_module",number_drugs_for_module[,1],sep="_")
drugs_in_each_module<-aggregate(drug_primary_name ~ clusters, data =  data_current_patient[,c("clusters","drug_primary_name")], paste,collapse="@") #use this character to merge drugs because it is important in the next step.
drugs_in_each_module<-drugs_in_each_module[,2]
names(drugs_in_each_module)<-paste("drugs_in_",paste("module",number_drugs_for_module[,1],sep="_"),sep="")
#extract the alteration scores for each module
scores_module<-aggregate(scorescorestatusmodule ~ clusters, data =  data_current_patient[,c("clusters","scorescorestatusmodule")], unique)
scores_module_unique<-scores_module[,2]
names(scores_module_unique)<-paste("score_alteration_module",scores_module[,1],sep="")
#extract the drugs scores for each module
scores_module_drugs<-aggregate(TOTAL_score_module_drugs ~ clusters, data =  data_current_patient[,c("clusters","TOTAL_score_module_drugs")], unique)
scores_module_drugs_unique<-scores_module_drugs[,2]
names(scores_module_drugs_unique)<-paste("score_drugs_rdg",scores_module_drugs[,1],sep="_")
#extract the sad scores for each module
scores_module_sad<-aggregate(combinedscore ~ clusters, data =  data_current_patient[,c("clusters","combinedscore")], unique)
scores_module_sad_unique<-scores_module_sad[,2]
names(scores_module_sad_unique)<-paste("score_sad",scores_module_sad[,1],sep="_")
#extract rule for each module
rule_in_each_module<-aggregate(clusters ~ rule, data =  data_current_patient[,c("clusters","rule")], unique)
rule_save<-as.character(rule_in_each_module[,1])
names(rule_save)<-paste(paste("rule_module",rule_in_each_module[,2],sep=""))
row_for_each_patient<-c(patient_id,
total_genes_patients,
number_modules,
number_genes_for_module_size,
genes_in_each_module,
number_drugs_for_module_size,
drugs_in_each_module,
scores_module_unique,
scores_module_drugs_unique,
scores_module_sad_unique,
rule_save
)
row_for_each_patient_t<-t(data.frame(row_for_each_patient))
colnames(row_for_each_patient_t)<-names(row_for_each_patient)
dfrow<-data.frame(row_for_each_patient_t,stringsAsFactors=F)
colnames(dfrow)<-as.character(names(row_for_each_patient))
MATRIX_RESULTS_ALL<-rbind.fill(MATRIX_RESULTS_ALL,dfrow)
}
str(MATRIX_RESULTS_ALL)
MATRIX_RESULTS_ALL$sample_id<-gsub(MATRIX_RESULTS_ALL$sample_id,pattern=".analysisGMIEC",replacement="")
str(MATRIX_RESULTS_ALL)
MATRIX_RESULTS_ALL_CLINICAL<-MATRIX_RESULTS_ALL[-1,]
str(MATRIX_RESULTS_ALL_CLINICAL)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
