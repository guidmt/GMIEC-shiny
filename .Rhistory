}else{
ht5=Heatmap(VECTOR_DRUGS,cluster_rows = FALSE,cluster_columns = FALSE,name="DRUGS",rect_gp = gpar(col = 'black'),width=0.3,col="gainsboro")
}
ht1+ht2+ht3+ht4+ht5
###count the number of drugs for genes
VECTOR_DRUGS<-NULL
for(g in genes){
print(g)
countDrugs<-length(input_DRUGS[input_DRUGS[,1]==g,2])
VECTOR_DRUGS<-c(VECTOR_DRUGS,countDrugs)
}
print("heatmap ge")
ht1=Heatmap(input_GE_sel,row_labels=rownames(input_GE_sel),row_names_side="left",cluster_rows = FALSE,cluster_columns = FALSE,name="GE",rect_gp = gpar(col = 'black'),rev(brewer.pal(6,"RdYlBu")),width=0.3)
print("heatmap cnv")
if(unique(input_CNV_sel)!=0){
ht2=Heatmap(input_CNV_sel,cluster_rows = FALSE,cluster_columns = FALSE,name="CNV",rect_gp = gpar(col = 'black'),rev(brewer.pal(6,"RdBu")),width=0.3)
} else{
ht2=Heatmap(input_CNV_sel,cluster_rows = FALSE,cluster_columns = FALSE,name="CNV",width=0.3,col="gainsboro")
}
print("heatmap meth")
if(unique(input_METH_sel)!=0){
ht3=Heatmap(input_METH_sel,cluster_rows = FALSE,cluster_columns = FALSE,name="METH",rect_gp = gpar(col = 'black'),rev(brewer.pal(6,"PuOr")),width=0.3)
}else{
ht3=Heatmap(input_METH_sel,cluster_rows = FALSE,cluster_columns = FALSE,name="METH",rect_gp = gpar(col = 'black'),width=0.3,col="gainsboro")
}
print("heatmap mut")
ht4=Heatmap(input_MUT_sel3,cluster_rows = FALSE,cluster_columns = FALSE,name="MUT",rect_gp = gpar(col = 'black'),width=0.3,col="gainsboro")
print("heatmap drugs")
if(unique(VECTOR_DRUGS)!=0){
ht5=Heatmap(VECTOR_DRUGS,cluster_rows = FALSE,cluster_columns = FALSE,name="DRUGS",rect_gp = gpar(col = 'black'),rev(brewer.pal(6,"YlOrRd")),width=0.3)
}else{
ht5=Heatmap(VECTOR_DRUGS,cluster_rows = FALSE,cluster_columns = FALSE,name="DRUGS",rect_gp = gpar(col = 'black'),width=0.3,col="gainsboro")
}
ht1+ht2+ht3+ht4+ht5
VECTOR_DRUGS
ht5=Heatmap(VECTOR_DRUGS,cluster_rows = FALSE,cluster_columns = FALSE,name="DRUGS",rect_gp = gpar(col = 'black'),rev(brewer.pal(6,"YlOrRd")),width=0.3)
ht5
draw(ht5)
draw(ht5)
pdf("test.pdf")
ht5
dev.off()
dev.off()
ht5=Heatmap(VECTOR_DRUGS,cluster_rows = FALSE,cluster_columns = FALSE,name="DRUGS",rect_gp = gpar(col = 'black'),rev(brewer.pal(6,"YlOrRd")),width=0.3)
ht5
if(unique(VECTOR_DRUGS)!=0){
ht5=Heatmap(VECTOR_DRUGS,cluster_rows = FALSE,cluster_columns = FALSE,name="DRUGS",rect_gp = gpar(col = 'black'),rev(brewer.pal(6,"YlOrRd")),width=0.3)
}else{
ht5=Heatmap(VECTOR_DRUGS,cluster_rows = FALSE,cluster_columns = FALSE,name="DRUGS",rect_gp = gpar(col = 'black'),width=0.3,col="gainsboro")
}
unique(VECTOR_DRUGS)!=0
if(length(unique(VECTOR_DRUGS))!=0){
ht5=Heatmap(VECTOR_DRUGS,cluster_rows = FALSE,cluster_columns = FALSE,name="DRUGS",rect_gp = gpar(col = 'black'),rev(brewer.pal(6,"YlOrRd")),width=0.3)
}else{
ht5=Heatmap(VECTOR_DRUGS,cluster_rows = FALSE,cluster_columns = FALSE,name="DRUGS",rect_gp = gpar(col = 'black'),width=0.3,col="gainsboro")
}
if(length(unique(VECTOR_DRUGS))!=0){
ht5=Heatmap(VECTOR_DRUGS,cluster_rows = FALSE,cluster_columns = FALSE,name="DRUGS",rect_gp = gpar(col = 'black'),rev(brewer.pal(6,"YlOrRd")),width=0.3)
}else{
ht5=Heatmap(VECTOR_DRUGS,cluster_rows = FALSE,cluster_columns = FALSE,name="DRUGS",rect_gp = gpar(col = 'black'),width=0.3,col="gainsboro")
}
ht5
ht1+ht2+ht3+ht4+ht5
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
create_output_gmiec_parse<-function(input_for_gmiec,type_input,type_of_output){
#if the analysis was performed with RFK
if(type_input=="Random forest + k-means"){
if(type_of_output=="Module active"){
column_to_select<-"s_onc" #get s_onc
} else {
column_to_select<-"s_sup" #get s_sup
}
#otherwise if the user selected to consider the drugs select sad score
if(type_of_output=="Module active with drugs" | type_of_output=="Module inactive with drugs"){
column_to_select<-"sad"
}
} else {
if(type_of_output=="Module active" | type_of_output=="Module inactive"){
column_to_select<-"score_alteration_module"
}
# if the type of
if(type_of_output=="Module active with drugs" | type_of_output =="Module inactive with drugs"){
column_to_select<-"sad"
}
}
#########
modules_to_select<-grep(colnames(input_for_gmiec),pattern=column_to_select)
if((type_of_output=="Module active" | type_of_output=="Module inactive") & type_input=="Random forest + k-means"){
#also for s_sup the algorithm must select the maximum value
idx_cell_with_score_selected<-apply(input_for_gmiec[,modules_to_select],1,which.max)
}
if(type_of_output=="Module active" & type_input=="Logic rules + k-means"){
idx_cell_with_score_selected<-apply(input_for_gmiec[,modules_to_select],1,which.max)
}
if(type_of_output=="Module inactive" & type_input=="Logic rules + k-means"){
idx_cell_with_score_selected<-apply(input_for_gmiec[,modules_to_select],1,which.min)
}
if(type_of_output=="Module active with drugs"){
idx_cell_with_score_selected<-apply(input_for_gmiec[,modules_to_select],1,which.max)
}
if(type_of_output=="Module inactive with drugs"){
idx_cell_with_score_selected<-apply(input_for_gmiec[,modules_to_select],1,which.min)
}
matrix_scores<-input_for_gmiec[,modules_to_select]
idx_genes<-grep(grep(colnames(input_for_gmiec),pattern="genes_in_module",value=T),pattern="number",inver=T,value=T)
matrix_genes<-input_for_gmiec[,idx_genes]
idx_drugs<-grep(grep(colnames(input_for_gmiec),pattern="drugs_in_module",value=T),pattern="number",inver=T,value=T)
matrix_drugs<-input_for_gmiec[,idx_drugs]
FINAL_OUTPUT<-data.frame()
for(r in 1:nrow(input_for_gmiec)){
#the number of rows it is equal to the number of index identified
selected_modules<-idx_cell_with_score_selected[r]
current_patient<-as.character(input_for_gmiec[r,1])
score_n_module_current_patient<-as.numeric(matrix_scores[r,selected_modules])
genes_n_module_current_patient<-as.character(matrix_genes[r,selected_modules])
drugs_n_module_current_patient<-as.character(matrix_drugs[r,selected_modules])
df<-data.frame(patientID=current_patient,
score=score_n_module_current_patient,
genes_in_module=genes_n_module_current_patient,
drugs_in_module=drugs_n_module_current_patient,
stringsAsFactors=F)
FINAL_OUTPUT<-rbind(FINAL_OUTPUT,df)
}
return(FINAL_OUTPUT)
}
type_of_output="Module active"
type_input="Logic rules + k-means"
input_for_gmiec=read.delim(file="Analysis_GMIEC_RFK_main_results.2020-05-29.csv")
getwd()
input_for_gmiec=read.delim(file="/Users/guidantonio/Desktop/Analysis_GMIEC_RFK_main_results.2020-05-29.csv")
input_for_gmiec
input_for_gmiec=read.csv(file="/Users/guidantonio/Desktop/Analysis_GMIEC_RFK_main_results.2020-05-29.csv")
input_for_gmiec
#if the analysis was performed with RFK
if(type_input=="Random forest + k-means"){
if(type_of_output=="Module active"){
column_to_select<-"s_onc" #get s_onc
} else {
column_to_select<-"s_sup" #get s_sup
}
#otherwise if the user selected to consider the drugs select sad score
if(type_of_output=="Module active with drugs" | type_of_output=="Module inactive with drugs"){
column_to_select<-"sad"
}
} else {
if(type_of_output=="Module active" | type_of_output=="Module inactive"){
column_to_select<-"score_alteration_module"
}
# if the type of
if(type_of_output=="Module active with drugs" | type_of_output =="Module inactive with drugs"){
column_to_select<-"sad"
}
}
FINAL_OUTPUT
#########
modules_to_select<-grep(colnames(input_for_gmiec),pattern=column_to_select)
if((type_of_output=="Module active" | type_of_output=="Module inactive") & type_input=="Random forest + k-means"){
#also for s_sup the algorithm must select the maximum value
idx_cell_with_score_selected<-apply(input_for_gmiec[,modules_to_select],1,which.max)
}
if(type_of_output=="Module active" & type_input=="Logic rules + k-means"){
idx_cell_with_score_selected<-apply(input_for_gmiec[,modules_to_select],1,which.max)
}
if(type_of_output=="Module inactive" & type_input=="Logic rules + k-means"){
idx_cell_with_score_selected<-apply(input_for_gmiec[,modules_to_select],1,which.min)
}
if(type_of_output=="Module active with drugs"){
idx_cell_with_score_selected<-apply(input_for_gmiec[,modules_to_select],1,which.max)
}
if(type_of_output=="Module inactive with drugs"){
idx_cell_with_score_selected<-apply(input_for_gmiec[,modules_to_select],1,which.min)
}
matrix_scores<-input_for_gmiec[,modules_to_select]
idx_genes<-grep(grep(colnames(input_for_gmiec),pattern="genes_in_module",value=T),pattern="number",inver=T,value=T)
matrix_genes<-input_for_gmiec[,idx_genes]
idx_drugs<-grep(grep(colnames(input_for_gmiec),pattern="drugs_in_module",value=T),pattern="number",inver=T,value=T)
matrix_drugs<-input_for_gmiec[,idx_drugs]
FINAL_OUTPUT<-data.frame()
for(r in 1:nrow(input_for_gmiec)){
#the number of rows it is equal to the number of index identified
selected_modules<-idx_cell_with_score_selected[r]
current_patient<-as.character(input_for_gmiec[r,1])
score_n_module_current_patient<-as.numeric(matrix_scores[r,selected_modules])
genes_n_module_current_patient<-as.character(matrix_genes[r,selected_modules])
drugs_n_module_current_patient<-as.character(matrix_drugs[r,selected_modules])
df<-data.frame(patientID=current_patient,
score=score_n_module_current_patient,
genes_in_module=genes_n_module_current_patient,
drugs_in_module=drugs_n_module_current_patient,
stringsAsFactors=F)
FINAL_OUTPUT<-rbind(FINAL_OUTPUT,df)
}
idx_cell_with_score_selected
column_to_select
modules_to_select
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", 10, min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("@RealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
),
hidden(
div(id="tweet_fetcher",
uiOutput("status2")
)
)
)
Server <- function(input, output){
list = c(1,2,3)
get_connected <- reactive({
for(i in 1:length(list)){
Sys.sleep(2)
}
})
observeEvent(input$get_tweets, {
get_connected()
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
toggle("tweet_fetcher")
output$status2 <- renderUI(actionButton("status2", "a_button"))
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", 10, min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("@RealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
),
hidden(
div(id="tweet_fetcher",
uiOutput("status2")
)
)
)
Server <- function(input, output){
list = c(1,2,3)
get_connected <- reactive({
for(i in 1:length(list)){
Sys.sleep(2)
}
})
observeEvent(input$get_tweets, {
get_connected()
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
toggle("tweet_fetcher")
output$status2 <- renderUI(actionButton("status2", "a_button"))
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", 10, min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("@RealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
),
hidden(
div(id="tweet_fetcher",
uiOutput("status2")
)
)
)
Server <- function(input, output){
list = c(1,2,3)
get_connected <- reactive({
for(i in 1:length(list)){
Sys.sleep(2)
}
})
observeEvent(input$get_tweets, {
get_connected()
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
toggle("tweet_fetcher")
output$status2 <- renderUI(actionButton("status2", "a_button"))
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", 10, min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("@RealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
),
hidden(
div(id="tweet_fetcher",
uiOutput("status2")
)
)
)
Server <- function(input, output){
list = c(1,2,3)
get_connected <- reactive({
for(i in 1:length(list)){
Sys.sleep(2)
}
})
observeEvent(input$get_tweets, {
get_connected()
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
toggle("tweet_fetcher")
output$status2 <- renderUI(actionButton("status2", "a_button"))
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
ui <- fluidPage(
tags$head(tags$script(src = "message-handler.js")),
actionButton("do", "Click Me")
)
server <- function(input, output, session) {
observeEvent(input$do, {
session$sendCustomMessage(type = 'testmessage',
message = 'Thank you for clicking')
})
}
shinyApp(ui, server)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
install.packages("shinyalert")
library(shinyalert)
library(shiny)
library(shinyalert)
ui <- fluidPage(
useShinyalert(),  # Set up shinyalert
actionButton("preview", "Preview")
)
server <- function(input, output, session) {
observeEvent(input$preview, {
# Show a modal when the button is pressed
shinyalert("Oops!", "Something went wrong.", type = "error")
})
}
shinyApp(ui, server)
?shinyalert
library(shiny)
library(shinyalert)
ui <- fluidPage(
useShinyalert(),  # Set up shinyalert
actionButton("preview", "Preview")
)
server <- function(input, output, session) {
observeEvent(input$preview, {
# Show a modal when the button is pressed
shinyalert("Oops!", "Something went wrong.", type = "info")
})
}
shinyApp(ui, server)
## Only run this example in interactive R sessions
if (interactive()) {
library(shiny)
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
side = "right", height = "250px",
selected = "Tab3",
tabPanel("Tab1", "Tab content 1"),
tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
)
)
)
shinyApp(
ui = dashboardPage(dashboardHeader(title = "tabBoxes"), dashboardSidebar(), body),
server = function(input, output) {
# The currently selected tab from the first box
output$tabset1Selected <- renderText({
input$tabset1
})
}
)
}
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
library(shiny)
setwd("/Users/guidantonio/Desktop/github/GMIEC-shiny")
options(shiny.fullstacktrace=TRUE)
runApp(launch.browser=TRUE)
setwd("/Users/guidantonio/Desktop/GitHub/GMIEC-shiny")
source("run_GMIEC.R")
source("run_GMIEC.R")
