mat[1:3,1:3]
mat<-mat[1:3,1:3]
chordDiagram(mat)
library(circilize)
library(circlize)
chordDiagram(mat)
set.seed(999)
mat = matrix(sample(18, 18), 6, 6)
rownames(mat) = paste0("S", 1:6)
colnames(mat) = paste0("E", 1:6)
mat
mat
chromDiagram(mat)
chordDiagram(mat)
diag(mat)==0
diag(mat)
diag(mat)<-0
mat
chordDiagram(mat)
mat
mat
mat = matrix(1:9, 3)
mat
mat
mat = matrix(1:9, 3)
rownames(mat) = letters[1:3]
colnames(mat) = LETTERS[1:3]
mat
class(mat)
mat
grid_col
grid.col
class(mat)
mat
mat
mat = matrix(sample(18, 18), 8, 8)
rownames(mat) = paste0("S", 1:8)
colnames(mat) = paste0("E", 1:8)
set.seed(999)
mat = matrix(sample(18, 18), 8, 8)
rownames(mat) = paste0("S", 1:8)
colnames(mat) = paste0("E", 1:8)
mat
diag(mat)==0
mat
grid.col = c(S1 = "red", S2 = "green", S3 = "blue", S4 = "blue",S5 = "blue",S6 = "blue",S7 = "blue",
,S8 = "blue",E1 = "grey", E2 = "grey", E3 = "grey", E4 = "grey", E5 = "grey", E6 = "grey")
grid.col = c(S1 = "red", S2 = "green", S3 = "blue", S4 = "blue",S5 = "blue",S6 = "blue",S7 = "blue",
S8 = "blue",E1 = "grey", E2 = "grey", E3 = "grey", E4 = "grey", E5 = "grey", E6 = "grey")
grid.col
chordDiagram(mat, grid.col = grid.col)
rownames(mat)
colnames(mat)
mat
diag(mat)==0
diag(mat)<-0
grid.col = c(S1 = "red", S2 = "green", S3 = "blue", S4 = "blue",S5 = "blue",S6 = "blue",S7 = "blue",
S8 = "blue",E1 = "grey", E2 = "grey", E3 = "grey", E4 = "grey", E5 = "grey", E6 = "grey")
diag(mat)==0
chordDiagram(mat, grid.col = grid.col)
dim(mat)
rownames(mat)
colnames(mat)
chordDiagram(mat, grid.col = grid.col)
chordDiagram(data.frame(mat), grid.col = grid.col)
chordDiagram(mat, grid.col = grid.col)
mat
grid.col
mat = matrix(1:18, 3, 6)
rownames(mat) = paste0("S", 1:3)
colnames(mat) = paste0("E", 1:6)
rn = rownames(mat)
cn = colnames(mat)
factors = c(rn, cn)
factors
factors = factor(factors, levels = factors)
factors = factor(factors, levels = factors)
col_sum = apply(mat, 2, sum)
row_sum = apply(mat, 1, sum)
xlim = cbind(rep(0, length(factors)), c(row_sum, col_sum))
log(2,2)
log(1.5,2)
2^-0.58
2^1
2^-0.5800544
2^-0.600544
2^-0.40
2^-0.3
2^-0.1
2^-1
library(DESeq1)
library(DESeq2)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
log2foldchange
log2FoldChange
DESeq2::log2foldchange
DESeq2::collapseReplicates()
logratio2foldchange
logratio2foldchange
logratio2foldchange
DESeq2
library(DESeq2)
logratio2foldchange
ls(DESeq2)
library(gtools)
logratio2foldchange()
logratio2foldchange(-2)
logratio2foldchange()
logratio2foldchange(-0.58)
logratio2foldchange(-3.876245)
install.packages("rworldmap")
library(rworldmap)
airports <- read.csv("http://openflights.svn.sourceforge.net/viewvc/openflights/openflights/data/airports.dat", header = FALSE)
colnames(airports) <- c("ID", "name", "city", "country", "IATA_FAA", "ICAO", "lat", "lon", "altitude", "timezone", "DST")
> colnames(airports) <- c("ID", "name", "city", "country", "IATA_FAA", "ICAO", "lat", "lon", "altitude", "timezone", "DST")
library(rworldmap)
newmap <- getMap(resolution = "low")
install.packages("ggmap")
library(ggmap)
library(tidyverse)
map.tokyo <- get_map("Tokyo")
ggmap(map.tokyo)
get_map("Tokyo") %>% ggmap()
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(ggmap)
library(tidyverse)
Now that our packages are downloaded, let’s just get a simple map. Here, we’ll retrieve a basic map of Tokyo from Google Maps.
#=================
# GET MAP OF Tokyo
#=================
map.tokyo <- get_map("Tokyo")
ggmap(map.tokyo)
get_map("Japan") %>% ggmap()
get_map("Japan", zoom = 5) %>% ggmap()
# note: not zoomed enough
get_map("Shinjuku") %>% ggmap()
# this is properly zoomed
get_map("Shinjuku", zoom = 16) %>% ggmap()
df.tokyo_locations <- tibble(location = c("Ueno, Tokyo, Japan"
,"Shibuya, Tokyo, Japan"
,"Shinjuku, Tokyo, Japan"))
# GEOCODE
geo.tokyo_locations <- geocode(df.tokyo_locations$location)
# COMBINE DATA
df.tokyo_locations <- cbind(df.tokyo_locations, geo.tokyo_locations)
# USE WITH GGPLOT
get_map("Tokyo", zoom = 12) %>% ggmap() +
geom_point(data = df.tokyo_locations, aes(x = lon, y = lat), color = 'red', size = 3)
library(ggmap)
library(tidyverse)
Now that our packages are downloaded, let’s just get a simple map. Here, we’ll retrieve a basic map of Tokyo from Google Maps.
#=================
# GET MAP OF Tokyo
#=================
library(ggmap)
library(tidyverse)
install.packages("rlang")
library(ggmap)
library(tidyverse)
map <- openmap(c(70,-179), c(-70,179))
library(OpenStreetMap)
install.packages("OpenStreMap")
install.packages("OpenStreeMap")
install.packages("OpenStreetMap")
library(library(OpenStreetMap)
)
library(OpenStreetMap)
install.packages("tibble")
library(OpenStreetMap)
map <- openmap(c(70,-179), c(-70,179))
plot(map)
data(LA_places)
LA_places
library(rmarkdown)
library(shiny)
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$somevalue })
}
shinyApp(ui, server)
}
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp()
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
output$value
}
shinyApp(ui, server)
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
output$value
print(value == value)
}
shinyApp(ui, server)
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
output$value
print(value == TRUE)
}
shinyApp(ui, server)
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
print(value == TRUE)
}
shinyApp(ui, server)
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
print(value == TRUE)
}
shinyApp(ui, server)
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
value <- renderText({ input$somevalue }
}
shinyApp(ui, server)
runApp()
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
runApp('C:/Users/guida/Desktop/work/GMIEC_shiny')
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
""*10
""-10
"x"-10
1.5*10
library(flextable)
dat <- data.frame(
col = "CRAN website", href = "https://cran.r-project.org",
stringsAsFactors = FALSE)
ft <- flextable(dat)
ft <- display(
ft, col_key = "col", pattern = "# {{mylink}}",
formatters = list(mylink ~ hyperlinked_text(href, col) )
)
dat()
ft
dat <- data.frame(
col = "entrez",
href = "https://www.ncbi.nlm.nih.gov/gene?cmd=Retrieve&dopt=full_report&list_uids=6850",
stringsAsFactors = FALSE)
ft <- flextable(dat)
ft <- display(
ft, col_key = "col", pattern = "# {{mylink}}",
formatters = list(mylink ~ hyperlink_text(href, col) )
)
ft # works fine
doc <- read_pptx() %>%
add_slide(layout = 'Title and Content', 'Office Theme') %>%
ph_with_flextable(ft) # error
dat <- data.frame(
col = "entrez", href = URLencode("https://www.ncbi.nlm.nih.gov/gene?cmd=Retrieve&dopt=full_report&list_uids=6850", reserved = TRUE),
stringsAsFactors = FALSE)
ft <- flextable(dat)
ft <- display(
ft, col_key = "col", pattern = "# {{mylink}}",
formatters = list(mylink ~ hyperlink_text(href, col) )
)
ft # clicking the link in rstudio fails
doc <- read_pptx() %>%
add_slide(layout = 'Title and Content', 'Office Theme') %>%
ph_with_flextable(ft) # fine, no error messa
ft
library(shiny)
# Load the ggplot2 package which provides
# the 'mpg' dataset.
library(ggplot2)
# Define the overall UI
shinyUI(
fluidPage(
titlePanel("Basic DataTable"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("man",
"Manufacturer:",
c("All",
unique(as.character(mpg$manufacturer))))
),
column(4,
selectInput("trans",
"Transmission:",
c("All",
unique(as.character(mpg$trans))))
),
column(4,
selectInput("cyl",
"Cylinders:",
c("All",
unique(as.character(mpg$cyl))))
)
),
# Create a new row for the table.
fluidRow(
dataTableOutput(outputId="table")
),
tags$head(tags$script("var f_fnRowCallback = function( nRow, aData, iDisplayIndex,     iDisplayIndexFull ){
$('td', nRow).click( function(){Shiny.onInputChange('request_ij',     [$(this).parent().index(),$(this).index()])} );
}
Shiny.addCustomMessageHandler('showRequested_ij', function(x) {
alert(x)
})"))
)
)
library(shiny)
library(ggplot2)
shinyServer(function(input, output, session) {
# Filter data based on selections
output$table <- renderDataTable({
data <- mpg
if (input$man != "All"){
data <- data[data$manufacturer == input$man,]
}
if (input$cyl != "All"){
data <- data[data$cyl == input$cyl,]
}
if (input$trans != "All"){
data <- data[data$trans == input$trans,]
}
data
},options =  list(
fnRowCallback = I("function( nRow, aData, iDisplayIndex, iDisplayIndexFull )     {f_fnRowCallback( nRow, aData, iDisplayIndex, iDisplayIndexFull ) }")))
observe({
if(!is.null(input$request_ij)){
session$sendCustomMessage(type = "showRequested_ij", paste( "row:     ",input$request_ij[1],"    col: ",input$request_ij[2]))}
})
})
runApp()
library(shiny)
shinyApp(
ui = fluidPage(
tags$head(
tags$style("
#my_select_input ~ .selectize-control .option:nth-child(odd) {
background-color: rgba(30,144,255,0.5);
}
#my_select_input ~ .selectize-control .option:nth-child(even) {
background-color: rgba(205,92,92,0.5);
}
"
)
),
selectInput(
inputId = "my_select_input",
label = "Select Letter",
choices = c("A", "B", "C", "D")
)
),
server = function(input, output) {
}
)
library(shiny)
ui = shinyUI(fluidPage(
# Application title
titlePanel(
title =
tags$link(rel = "icon", type = "image/gif", href = "https://guidetoiceland.is/image/389003/x/0/the-beautiful-waterfalls-of-south-iceland-seljalandsfoss-skogafoss-amp-gljufrabui-1.jpg"),
"My App"
),
selectInput(
inputId = "Pick",
label = "Chose",
choices = c('A', 'B', 'C'),
selected = NULL,
multiple = FALSE,
selectize = TRUE,
size = NULL,
width = 300
))
)
server = function(input, output, session) {
}
shinyApp(ui = ui, server = server)
library(heatmaply)
heatmaply(percentize(mtcars),
subplot_widths=c(0.6, 0.4),
subplot_heights=c(0.05, 0.95))
librar(scater)
library(scater)
install.cpages("XVector")
install.packages("XVector")
BiocManager::install("scater", version = "3.8")
librar(scater)
library(scater)
install.pckages("stringi")
install.packages("stringi")
BiocManager::install("SingleCellExperiment", version = "3.8")
library(SingleCellExperiment)
library(GenomicRanges)
BiocManager::install("GenomicRanges", version = "3.8")
library(SingleCellExperiment)
library(GenomicsRanges)
BiocManager::install("GenomicRanges", version = "3.8")
library()
library(GenomicsRanges)
remove.packages("GenomicsRanges")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges", version = "3.8")
library("GenomicRanges")
library(SingleCellExperiment)
load("C:/Users/guida/Desktop/work/GMIEC_shiny/GMIEC.RData")
ls()
str(RES_ENGINE)
load("C:/Users/guida/Desktop/GMIEC.RData")
ls()
str(MATRIX_RESULTS_ALL_CLINICAL)
class(MATRIX_RESULTS_ALL_CLINICAL)
getwd()
write.table(t(MATRIX_RESULTS_ALL_CLINICAL[-1,]),file="Analysis_GMIEC_main_results.txt",sep="\t",row.names=T,col.names=F,quote=F) # the first row is always empty
load("C:/Users/guida/Desktop/GMIEC.RData")
ls()
str(MATRIX_RESULTS_ALL_CLINICAL)
write.table(t(MATRIX_RESULTS_ALL_CLINICAL[-1,]),file="C:/Users/guida/Desktop/Analysis_GMIEC_main_results.txt",sep="\t",row.names=T,col.names=F,quote=F) # the first row is always empty
library(shiny)
setwd("C:/Users/guida/Desktop/work/GMIEC_shiny")
options(shiny.fullstacktrace=TRUE)
shinyAppDir(appDir="C:/Users/guida/Desktop/work/GMIEC_shiny")
EXIT
exit()
q()
